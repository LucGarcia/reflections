How did viewing a diff between two versions of a file help you see the bug that was introduced?
Reducing the length of the code that we need to compare.
Checking if we have changed something without noticing.
Identify where in the file is the mistake located.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
Having quick access to previous versions
Knowing what we have changed in every update
Recover the previous version if anything goes wrong

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
Pros:
	The version saved makes more sense.
	You can save after doing important work or in critical points.
Cons:
	You can loose changes if the system fails.
	You may forget to save.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
It depends on whether they are designed to work with only one document/file or several at the same time.

How can you use the commands git log and git diff to view the history of files?
You use git log to view the different commits that have been saved in the repository.
You use git diff to compare two commits and see the changes between them.

How might using version control make you more confident to make changes that could break something?
You can always restore an old version, or find the one where a bug was introduced. It makes it easy to find problems and if you need to use the program, you can restore an older version if there are problems. This allows you to try structural changes without worrying about screwing up the whole project.

Now that you have your workspace set up, what do you want to try using Git for?
To start my full stack web developer nanodegree.

