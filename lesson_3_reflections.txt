When would you want to use a remote repository rather than keeping all your work local?
When you don't always access it from the same computer.
When other people contribute to the project.
When you want other people to see it (e.g. open source project).

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
You may not want to pull all your changes, this way you can select when and which changes to update.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Forks are copies of a repository that are made directly from one GitHub account to another. They are useful when we want to work on a repository without access to the remote or permission to make changes. 
Clones are copies of a repository made within a computer or between GitHub and a local computer. They are useful when we want to work on a project collaborating with others through GitHub, or just share it.
Branches are divergences made within a repository. They are useful when we want to add changes while keeping the original master branch unaffected.

What is the benefit of having a copy of the last known state of the remote stored locally?
It gives us information so we can reference how many commits have we made since the last update. 
If we check the remote through GitHub, we can see whether others have made changes that could conflict.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
Either sharing a computer, or setting up a computer remote application. Also, the files could be sent back and forth, but that would be a pain. 
There would be less steps (you wouldn't need to add, commit, push every set of changes).
It would be harder to work simultaneously, and it wouldn't be possible to work offline on the project. Also, it would be less secure.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
When you want others to check out the changes before they are made (maybe they don't agree or they can see a better solution). 
Not using a separate branch simplifies the process by eliminating steps.
Using a separate branch allows others to continue working in the master branch without interferences, or also show it to clients, etc. 